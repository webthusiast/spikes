#!/usr/bin/env bash

ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"

set -a
. $ABSOLUTE_PATH/env
set +a

__usage() {
  bash -c ". '${BASH_SOURCE[0]}'; typeset -F | cut -d' ' -f3 | grep -v ^__"
}

__curl() {
  curl -X ${1:-GET} "https://api.digitalocean.com/v2/$2" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" "${@:3}"
}

__ssh-key-fingerprint() {
  ssh-keygen -E md5 -lf "$PUBLIC_SSH_KEY_FILE" | cut -d' ' -f2 | cut -c5-
}

list-ssh-keys() {
  __curl GET account/keys
}

list-ssh-key() {
  __curl GET "account/keys/$(__ssh-key-fingerprint)"
}

create-ssh-key() {
  __curl POST account/keys -d "$(<"$PUBLIC_SSH_KEY_FILE" jq -Rs '{name: "Personal", public_key: .}')"
}

delete-ssh-key() {
  local ssh_key_id="$1"
  __curl DELETE "account/keys/$ssh_key_id" -d ''
}

list-volumes() {
  __curl GET volumes
}

__volume-json() {
  jq -n -f "$ABSOLUTE_PATH/volume.jq"
}

create-volume() {
  __curl POST volumes -d "$(__volume-json)"
}

__volume-name() {
  __volume-json | jq -r .name
}

__volume-id() {
  list-volumes | jq -r --arg name "$(__volume-name)" '.volumes | map(select(.name == $name)) | first | .id'
}

delete-volume() {
  __curl DELETE "volumes/$(__volume-id)" -d ''
}

list-droplets() {
  __curl GET droplets
}

__droplet-json() {
  local user_data="$(./write-mime-multipart init.sh:x-shellscript init.conf:cloud-config)"
  jq -n --arg ssh_key "$(__ssh-key-fingerprint)" --arg volume "$(__volume-id)" --arg user_data "$user_data" -f "$ABSOLUTE_PATH/droplet.jq"
}

create-droplet() {
  __curl POST droplets -d "$(__droplet-json)"
}

__droplet-name() {
  __droplet-json | jq -r .name
}

__droplet-id() {
  list-droplets | jq -r --arg name "$(__droplet-name)" '.droplets | map(select(.name == $name)) | first | .id'
}

list-droplet() {
  __curl GET "droplets/$(__droplet-id)"
}

__droplet-ip() {
  list-droplet | jq -r '.droplet.networks.v4 | first | .ip_address'
}

delete-droplet() {
  __curl DELETE "droplets/$(__droplet-id)" -d ''
}

ssh-droplet() {
  ssh "root@$(__droplet-ip)"
}

list-domains() {
  __curl GET domains
}

create-domain() {
  __curl POST domains -d "$(jq -n '{name: env.DOMAIN, ttl: 60}')"
}

delete-domain() {
  __curl DELETE "domains/$DOMAIN" -d ''
}

list-domain-records() {
  __curl GET domains/$DOMAIN/records
}

create-domain-record() {
  __curl POST domains/$DOMAIN/records -d "$(jq -n --arg ip "$(__droplet-ip)" -f "$ABSOLUTE_PATH/dns-record.jq")"
}

__domain-record-id() {
  list-domain-records | jq -r '.domain_records | map(select(.name == "droplet1")) | first | .id'
}

update-domain-record() {
  export RECORD_ID=$(__domain-record-id)
  __curl PUT "domains/$DOMAIN/records/$RECORD_ID" -d "$(jq -n --arg ip "$(__droplet-ip)" -f "$ABSOLUTE_PATH/dns-record.jq" | jq '. + {id: env.RECORD_ID}')"
}

delete-domain-record() {
  export RECORD_ID=$(__domain-record-id)
  __curl DELETE "domains/$DOMAIN/records/$RECORD_ID" -d ''
}

if test $# -eq 0 && test $(basename ${0#-}) = $(basename ${BASH_SOURCE[0]})
then __usage
else "$@"
fi
